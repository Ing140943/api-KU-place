# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class StationAnual(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, basin_id=None, year=None, rainfall=None):  # noqa: E501
        """StationAnual - a model defined in OpenAPI

        :param basin_id: The basin_id of this StationAnual.  # noqa: E501
        :type basin_id: int
        :param year: The year of this StationAnual.  # noqa: E501
        :type year: int
        :param rainfall: The rainfall of this StationAnual.  # noqa: E501
        :type rainfall: float
        """
        self.openapi_types = {
            'basin_id': int,
            'year': int,
            'rainfall': float
        }

        self.attribute_map = {
            'basin_id': 'basin_id',
            'year': 'year',
            'rainfall': 'rainfall'
        }

        self._basin_id = basin_id
        self._year = year
        self._rainfall = rainfall

    @classmethod
    def from_dict(cls, dikt) -> 'StationAnual':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StationAnual of this StationAnual.  # noqa: E501
        :rtype: StationAnual
        """
        return util.deserialize_model(dikt, cls)

    @property
    def basin_id(self):
        """Gets the basin_id of this StationAnual.


        :return: The basin_id of this StationAnual.
        :rtype: int
        """
        return self._basin_id

    @basin_id.setter
    def basin_id(self, basin_id):
        """Sets the basin_id of this StationAnual.


        :param basin_id: The basin_id of this StationAnual.
        :type basin_id: int
        """

        self._basin_id = basin_id

    @property
    def year(self):
        """Gets the year of this StationAnual.


        :return: The year of this StationAnual.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this StationAnual.


        :param year: The year of this StationAnual.
        :type year: int
        """

        self._year = year

    @property
    def rainfall(self):
        """Gets the rainfall of this StationAnual.


        :return: The rainfall of this StationAnual.
        :rtype: float
        """
        return self._rainfall

    @rainfall.setter
    def rainfall(self, rainfall):
        """Sets the rainfall of this StationAnual.


        :param rainfall: The rainfall of this StationAnual.
        :type rainfall: float
        """

        self._rainfall = rainfall
